import matplotlib.pyplot as plt
import numpy as np
import pandas

# load parameters
import argparse
parser = argparse.ArgumentParser(description="load and display neuron behavior data. Neuron behavior is generated by neuron gates when the record_behavior parameter in markov brain neuron gates is set to true.")

parser.add_argument('-file', type=str, metavar='FILE', default = 'neuron_behavior.csv',  help='neuron behavior file - default: neuron_behavior.txt', required=False)
parser.add_argument('-pltRange', type=int, metavar=('FIRST','LAST'), default = [0,-1],  help='range over which to show data - default: none (will show all data)', nargs=2, required=False)
parser.add_argument('-hideFire', action='store_true', default = False, help='if true, fireing data will be hidden - default (if not set) : False', required=False)
parser.add_argument('-hideCurrentCharge', action='store_true', default = False, help='if true, CurrentCharge will be hidden - default (if not set) : False', required=False)
parser.add_argument('-hideThreshold', action='store_true', default = False, help='if true, Threshold will be hidden - default (if not set) : False', required=False)
parser.add_argument('-hideDeliveryCharge', action='store_true', default = False, help='if true, DeliveryCharge will be hidden - default (if not set) : False', required=False)
parser.add_argument('-cullStatic', action='store_true', default = False, help='if set, neurons whose fire state does not change over pltRange will not be shown - default (if not set) : False', required=False)
parser.add_argument('-ticksSize', type=int, metavar='SIZE', default = '10', help='size of ticks - default : 10', required=False)
parser.add_argument('-textSize', type=int, metavar='SIZE', default = '15', help='size of neuron label text - default : 15', required=False)
parser.add_argument('-figSize', type=int, metavar=('X','Y'), default = [6,6],  help='size of plot - default: 6,6', nargs=2, required=False)
args = parser.parse_args()

showFire = not args.hideFire
showCurrentCharge = not args.hideCurrentCharge
showThreshold = not args.hideThreshold
showDeliveryCharge = not args.hideDeliveryCharge
cullStatic = args.cullStatic


pltRangeMin = args.pltRange[0]
pltRangeMax = args.pltRange[1]


figureSizeX = args.figSize[0]
figureSizeY = args.figSize[1]
ticksSize = args.ticksSize
textSize = args.textSize


fileName=args.file

plt.rcParams['figure.figsize']=[figureSizeX,figureSizeY]

print('\nlegend:\n  black = threshold\n  blue = current charge\n  gray dashed = delivery charge\n  shaded area = when gate is active (green=activated/red=repressed)',flush=True)

# load data from file
data = pandas.read_csv(fileName)

# pull the data we need into lists
IDList = data['ID'].tolist()
rawFireList = data['fire'].tolist()
rawThresholdValueList = data['thresholdValue'].tolist()
rawCurrentChargeList = data['currentCharge'].tolist()
rawDeliveryChargeList = data['deliveryCharge'].tolist()
rawThresholdActivatesList = data['thresholdActivates'].tolist()

# find the number of neurons and the number of samples recorded
neuronCount= int(max(IDList)+1)
samplesCount = int(len(IDList)/neuronCount)

# clamp the pltRange to the samples
pltRangeMin = max(0,pltRangeMin)
if pltRangeMax == -1:
    pltRangeMax = samplesCount-1
pltRangeMax = min(samplesCount-1,pltRangeMax)
pltRange = list(range(pltRangeMin,pltRangeMax+1))

# create lists (of lists) to hold data seperated per neuron
fireLists = []
thresholdValueLists = []
currentChargeLists = []
deliveryChargeLists = []
thresholdActivatesList = []

# create containers for active neurons (i.e. not static)
activeNeurons = []
activeNeuronCount = 0

# populate the lists such that *list[x] has data for neuron x
for nID in range(neuronCount):
    fireLists.append([])
    thresholdValueLists.append([])
    currentChargeLists.append([])
    deliveryChargeLists.append([])
    thresholdActivatesList.append(rawThresholdActivatesList[nID])
	
    # only save data if the data is in pltRange
    for sampleID in range(samplesCount):
        if sampleID in pltRange:
            fireLists[-1].append(rawFireList[sampleID*neuronCount+nID])
            thresholdValueLists[-1].append(rawThresholdValueList[sampleID*neuronCount+nID])
            currentChargeLists[-1].append(rawCurrentChargeList[sampleID*neuronCount+nID])
            deliveryChargeLists[-1].append(rawDeliveryChargeList[sampleID*neuronCount+nID])
			
    # if the min and max of a fireList for a neuron are the not same then this neuron
    # is not always on or off (i.e. it's active)
    if min(fireLists[-1]) != max(fireLists[-1]):
        activeNeurons.append(nID)
        activeNeuronCount+=1

# plotNeuronIDs and plotNeuronCount will be used during ploting...
if cullStatic:
    plotNeuronIDs = activeNeurons
    plotNeuronsCount = activeNeuronCount
    print('looking for neurons with activity in range [',pltRangeMin,',',pltRangeMax,']\nfound ',plotNeuronsCount,' active neurons with ids: ',plotNeuronIDs,flush=True)
else:
    plotNeuronIDs = list(range(neuronCount))
    plotNeuronsCount = neuronCount

fig = plt.figure()
plots = []

for nID in range(plotNeuronsCount):
    plots.append(plt.axes([0,(1/plotNeuronsCount)*(plotNeuronsCount - nID - 1),1.0,(1/plotNeuronsCount)*.95]))
    plt.figtext(.03,((1/plotNeuronsCount)*(plotNeuronsCount - nID - 1)) + (1/plotNeuronsCount * .8),"neuron " + str(plotNeuronIDs[nID]),size=textSize)

    this_currentChargeList = currentChargeLists[plotNeuronIDs[nID]]
    this_thresholdValueList = thresholdValueLists[plotNeuronIDs[nID]]
    this_deliveryChargeList = deliveryChargeLists[plotNeuronIDs[nID]]
    this_deliveryChargeList = [deliveryChargeLists[plotNeuronIDs[nID]][i] * fireLists[plotNeuronIDs[nID]][i] for i in range(len(deliveryChargeLists[plotNeuronIDs[nID]]))]
    lowBound = min(min(this_thresholdValueList),min(this_currentChargeList),min(this_deliveryChargeList))
    highBound = max(max(this_thresholdValueList),max(this_currentChargeList),max(this_deliveryChargeList))
    deltaBound = (highBound - lowBound)

    xValues = []
    for val in pltRange:
        xValues.append(val)
        xValues.append(val+1)

    if showFire:
        this_fireList = []
        for val in fireLists[plotNeuronIDs[nID]]:
            this_fireList.append((lowBound - (deltaBound * .2)) + (val*(deltaBound + (deltaBound * .4))))
            this_fireList.append((lowBound - (deltaBound * .2)) + (val*(deltaBound + (deltaBound * .4))))
        # for fireLists, this will create shaded areas of green (activating) or red (repressive) when this gate is firing
        fireColor = (1,0,0)
        if (thresholdActivatesList[plotNeuronIDs[nID]]):
            fireColor = (0,1,0)
        plots[nID].fill_between(xValues,[lowBound - (deltaBound * .2)]*len(this_fireList), this_fireList,color = fireColor, alpha = .4)
    if showCurrentCharge:
        plotCurrentChargeList = []
        for val in this_currentChargeList:
            plotCurrentChargeList.append(val)
            plotCurrentChargeList.append(val)
        plots[nID].plot(xValues,plotCurrentChargeList,color = (0,0,1),alpha = 1)
    if showThreshold:
        plotThresholdValueList = []
        for val in this_thresholdValueList:
            plotThresholdValueList.append(val)
            plotThresholdValueList.append(val)
        plots[nID].plot(xValues,plotThresholdValueList,color = (0,0,0),alpha = 1)
    if showDeliveryCharge:
        plotDeliverChargeList = []
        for val in this_deliveryChargeList:
            plotDeliverChargeList.append(val)
            plotDeliverChargeList.append(val)
        plots[nID].plot(xValues,plotDeliverChargeList,color = (0,0,0),alpha = .25, linestyle = '-.',linewidth=3)
	
    plots[nID].set_ylim(lowBound - (deltaBound*.1),highBound + (deltaBound*.1))
    plots[nID].set_xlim(pltRangeMin,pltRangeMax)
    for tick in plots[nID].yaxis.get_major_ticks():
        tick.label.set_fontsize(ticksSize) 
    for tick in plots[nID].xaxis.get_major_ticks():
        tick.label.set_fontsize(ticksSize * (nID==plotNeuronsCount-1)) 

plt.savefig('neuronBehavior.pdf',bbox_inches='tight')

plt.show()

