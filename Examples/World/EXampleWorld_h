//  MABE is a product of The Hintze Lab @ MSU
//     for general research information:
//         hintzelab.msu.edu
//     for MABE documentation:
//         github.com/Hintzelab/MABE/wiki
//
//  Copyright (c) 2015 Michigan State University. All rights reserved.
//     to view the full license, visit:
//         github.com/Hintzelab/MABE/wiki/License

#pragma once					// directive to insure that this .h file is only included one time

#include "../../World/AbstractWorld.h" // AbstractWorld estabishes all the basic functions for worlds

using namespace std;

class ExampleWorld : public AbstractWorld {

public:

	// MABE Parameters are a special type of variable. In addtion to being a
	// name/value pair (i.e. "worldSizeX" = 10), parameters contain a usage
	// string (which explains what the parameter is for - "size of world in
	// X"). MABE knows how to write parameters to configuration (.cfg) files
	// and how to read parameters from configuration files and the command line.
	//
	// Parameter links (PLs) are how you interface with parameters. They
	// provide an easy way to access parameters and register parameters
	// (more on accessing and regestering parameters in ExampleWorld.cpp)
	//
	// see parameters: https://github.com/Hintzelab/MABE/wiki/Parameters

	// example ParameterLinks (PLs)
	static shared_ptr<ParameterLink<int>> exampleIntPL;
	static shared_ptr<ParameterLink<double>> exampleDoublePL;
	static shared_ptr<ParameterLink<bool>> exampleBoolPL;
	static shared_ptr<ParameterLink<string>> exampleStringPL;



	// Example ParametersLink for an MTree
	// MTree is a MABE utility used to define a formula (which can include
	// parameters and values in an organisms DataMap). MTrees allow for parameters
	// to have non-constant values. Here, all you need to know is that
	// an MTree can be generated from a string, so if you want to have a parameter
	// use MTree the associated PL must be of type string.
	//
	// Mtree usage in worlds is investigated in more detail in ExampleWorld.cpp
	//
	// also see MTree: https://github.com/Hintzelab/MABE/wiki/MTree

	static shared_ptr<ParameterLink<string>> exampleMTreePL;

	// here a variable used to hold the actual MTree object is also defined
	shared_ptr<Abstract_MTree> exampleMT;


	// evaluationsPreGeneration is a useful parameter. Some brains or worlds have random
	// elements. In order to insure that organisms are not just "getting lucky" you can
	// evaluate each organism more then once and than average the results.
	// This can be costly, which is why it is a good idea to let the end user decide
	// on the number of evaluations.
	
	static shared_ptr<ParameterLink<int>> evaluationsPerGenerationPL;



	// parameters for group and brain namespaces
	// see the requiredGroups() function in ExampleWorld.cpp for more details
	
	static shared_ptr<ParameterLink<string>> groupNameSpacePL;
	static shared_ptr<ParameterLink<string>> brainNameSpacePL;

	
	
	ExampleWorld(shared_ptr<ParametersTable> _PT);
	virtual ~ExampleWorld() = default;



	// Worlds can be written in two ways:
	// a) worlds that rely on an Optimizer for reproduciton.
	//    These worlds generate "scores" or other values which are be used by an optimizer.
	//    They are generally called by main once per generation and main manages optimization
	//    and archiving
	// b) worlds that manage reproduction directly.
	//    These worlds are called by main once and run until they release control back to main.
	//    These worlds can use an optimizer directly or impliment their own reproduction method
	//    (e.g. when an organism has consumed x amount of food, produce an offspring). These
	//    worlds must manage calls to archivist. (more on this in the ExampleWorld.cpp file)

	// main will call evaluate() and pass (among other things) the map of groups which have been
	// generated by or loaded into MABE. In worlds which evaluate one organism at a time, it is
	// helpful (but not nessacary) to have an evaluateSolo function which recives a single
	// organism. Alternativly (and necessarily in cases where more than one organism is
	// evaluated at the same time - as is the case when organisms directly interact or
	// compete for a limited resource) the work of the world can be coded directly into
	// evaluate.

	virtual void evaluateSolo(shared_ptr<Organism> org, int analyze, int visualize, int debug);
	virtual void evaluate(map<string, shared_ptr<Group>>& groups, int analyze, int visualize, int debug) override;

	// required groups is used by main (or meta-worlds) to determine how MABE must configure
	// Groups (i.e. populations) in order to be compatable with this world.
	// (more on this in the ExampleWorld.cpp file) 
	virtual unordered_map<string, unordered_set<string>> requiredGroups() override;
};

