% GLOBAL
  initPop = default 2000                      #(string) initial population to start MABE (if it's .plf syntax it will be parsed as if preceded by "MASTER = ". If
                                             #  it's a file name with .plf that population loader file is parsed
  mode = run                                 #(string) mode to run MABE in [run,visualize,analyze]
  outputPrefix = ./                          #(string) Directory and prefix specifying where data files will be written
  randomSeed = -1                           #(int) seed for random number generator, if -1 random number generator will be seeded randomly
  updates = 5000                              #(int) how long the program will run

% ARCHIVIST
  outputMethod = Default                     #(string) output method, [Default]

% ARCHIVIST_DEFAULT
  filePrefix = NONE                          #(string) prefix for files saved by this archivst. "NONE" indicates no prefix.
  popFileColumns =                           #(string) data to be saved into average file (must be values that can generate an average). If empty, MABE will try
                                             #  to figure it out
  realtimeSequence = :10                     #(string) How often to write to realtime data files. (format: x = single value, x-y = x to y, x-y:z = x to y on x,
                                             #  :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotDataSequence = :100                #(string) How often to save a realtime snapshot data file. (format: x = single value, x-y = x to y, x-y:z = x to y
                                             #  on x, :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotOrganismsSequence = :1000          #(string) How often to save a realtime snapshot genome file. (format: x = single value, x-y = x to y, x-y:z = x to
                                             #  y on x, :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  writeMaxFile = 1                           #(bool) Save data to Max file?
  writePopFile = 1                           #(bool) Save data to average file?
  writeSnapshotDataFiles = 0                 #(bool) if true, snapshot data files will be written (with all non genome data for entire population)
  writeSnapshotOrganismsFiles = 0            #(bool) if true, snapshot organisms files will be written (with all organisms for entire population)

% OPTIMIZER
  optimizer = Lexicase                        #(string) optimizer to be used, [NSGA, Simple, Lexicase]

% OPTIMIZER_LEXICASE
  epsilon = 0.0                              #(double) cutoff when conducting per formula selection.
                                             #  e.g. 0.1 = organisms in the top 90% are kept. use 0.0 for classic Lexicase.
  epsilonRelativeTo = rank                   #(string) determines how epsilon is calculated [rank,score]
                                             #  if rank, epsilon will be relative to organism ranks
                                             #    i.e. keep (best current keepers count * epsilon) organisms
                                             #  if score epsilon will be relative to min and max score
                                             #    i.e. keep orgs with score >= maxScore - ( (maxScore-minScore) * epsilon )
  nextPopSize = -1                           #(string) size of population after optimization(MTree). -1 indicates use current population size
  numberParents = 2                          #(int) number of parents used to produce offspring
  optimizeFormulaNames = default             #(string) column names to associate with optimize formulas in data files.
                                             #  'default' will auto generate names as optimizeValue_1, optimizeValue_2, ...
  optimizeFormulas = DM_AVE[score],DM_AVE[lib]          #(string) values to optimize with lexicase selection (list of MTrees)
                                             #  example for BerryWorld: [DM_AVE[food1],DM_AVE[food2],(0-DM_AVE[switches])]
  poolSize = -1                              #(int) number of organisms used when selecting parent(s) in the lexicase algorithm, -1 indicates to use entire population
  recordOptimizeValues = 1                   #(bool) record optimize values to data files using optimizeFormulaNames

% OPTIMIZER_NSGA
  optimizeFormulaNames = default             #(string) column names to associate with optimize formulas in data files.
                                             #  'default' will auto generate names as optimizeValue_1, optimizeValue_2, ...
  optimizeFormulas = DM_AVE[score],DM_AVE[lib]           #(string) values to optimize with NSGA selection (list of MTrees)
                                             #  example for BerryWorld: [DM_AVE[food1],DM_AVE[food2],(0-DM_AVE[switches])]

% OPTIMIZER_SIMPLE
  cullBelow = -1.0                           #(double) cull organisms with score less then (((maxScore - minScore) * cullBelow) + minScore)
                                             #  if -1, no culling.
  cullByRange = 0                            #(bool) if true cull will be relative to min and max score
                                             #    i.e. cull organisms with score less then (((maxScore - minScore) * cullBelow) + minScore)
                                             #  if false, cull will be relative to organism ranks
                                             #    i.e. find score of cullBelow*populaiton size best, and discard all orgs with lower score.
  cullRemap = -1.0                           #(double) if cullBelow is being used (not -1) then remap scores between cullRemap and 1.0 so that the minimum score
                                             #  in the culled population is remapped to cullRemap and the high score is remapped to 1.0
                                             #  The effect will be that the lowest score after culling will have a cullRemap % chance to kept if selected using the
                                             #  Roulette selection method
  elitismCount = 1                           #(string) number of mutated offspring added to next population for each elite organism (MTree)
  elitismRange = 2                           #(string) number of elite organisms (i.e. if 5, then best 5) (MTree)
  nextPopSize = -1                           #(string) size of population after optimization(MTree). -1 indicates use current population size
  numberParents = 2                          #(int) number of parents used to produce offspring
  optimizeValue = DM_AVE[score]              #(string) value to optimize (MTree)
  selectionMethod = Tournament(size=1000)               #(string) how are parents selected? options: Roulette(),Tournament(size=VAL)
  selfRate = 0                               #(string) value between 0 and 1, probability that an organism will self (ignored if numberParents = 1) (MTree)
  surviveRate = 0                            #(string) value between 0 and 1, probability that an organism will survive (MTree)

% PARAMETER_FILES
  commentIndent = 45                         #(int) minimum space before comments
  maxLineLength = 160                        #(int) maximum line length

