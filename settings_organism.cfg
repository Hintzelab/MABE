% BRAIN
  brainType = Markov                            #(string) brain to be used, [Markov, CGP, Human, ANN, BiLog]

% BRAIN_ANN
  biasRange = -1.0,1.0                       #(string) When each nodes value is calculated a bias in this range (derived from the genome) will be added to the node
                                             #  value before thresholding.  (min,max)
  genomeName = root::                        #(string) namespace for parameters used to define this brain
  hiddenLayerSizes =                         #(string) comma seperated list of sizes for each hidden layer if there are hidden layers
                                             #  if a single number, all hidden layers will have this size
                                             #  if blank, hidden layers will all have (number of outputs + number of recurrent) nodes.
  nrOfHiddenLayers = 0                       #(int) number of hidden layers. if 0, hidden layer have (number of outputs + number of recurrent) nodes.
  nrOfRecurringNodes = 10                    #(int) number of recurring nodes
  thresholdMethod = Tanh                     #(string) Threshold method applied to node values after summation. Must be one of: NONE, Sigmoid, Tanh, ReLU, Binary
  weightRange = -1.0,1.0                     #(string) range for weight values (min,max)

% BRAIN_BiLog
  hiddenLayerSizeList = NONE                 #(string) what are the lengths of your hidden nodes? (if setting one size for all hidden nodes use a single integer
                                             #  i.e. 4; if you are setting the length of each layer individually use comma seperated integers with no spaces i.e.
                                             #  "3,2,5" ) default=NONE
  inputAlwaysAvailable = 0                   #(bool) are the input nodes available as input to all hidden layers? default=false
  nrOfHiddenLayers = 0                       #(int) how many hidden layers does the brain have? default=0 (this number should match the length of the hidden layer
                                             #  size list)
  nrOfRecurrentNodes = 0                     #(int) how many recurrent nodes does the brain have? default=0
  outputAlwaysAvailable = 0                  #(bool) are the output nodes available as input to all hidden layers? (only enable this if recurrentOutput = true)
                                             #  default=false
  recurrentAlwaysAvailable = 0               #(bool) are the recurrent nodes available as input to all hidden layers? default=false
  recurrentOutput = 0                        #(bool) is the output fed back as input? default=false

% BRAIN_BiLog_MUTATIONS
  mutationRateLogic1 = 0.01                  #(double) chance for a single point mutation to a gates logic per gate
  mutationRateLogic2 = 0.01                  #(double) chance for a double point mutation to a gates logic per gate
  mutationRateLogic3 = 0.01                  #(double) chance for a triple point mutation to a gates logic per gate
  mutationRateLogic4 = 0.01                  #(double) chance for a quadruple point mutation to a gates logic per gate
  mutationRateWires1 = 0.01                  #(double) chance for a single wire mutation per gate
  mutationRateWires2 = 0.01                  #(double) chance for a double wire mutation per gate
  mutation_Program_Filename =                #(string) if a file name is provided, mutation rates will be set using this file
                                             #  The file needs to be in CSV format and must contain the following columns:
                                             #  update,onePerBrain,onePerGate,wire1,wire2,logic1,logic2,logic3,logic4
                                             #  when Global::update = update for each row, each of the mutation parameters
                                             #  will be set to associated values. If the first update is not 0, then the
                                             #  paramters values will be used until the first defined update.
                                             #  An example file is provided: Brain/BiLogBrain/mutation_program.csv
  onePerBrain = -1.0                         #(double) If value is positive, then mutations will be limited to one per brain at this rate per brain.
                                             #  The distribution of mutations will be determined by the ratios of the defined mutation rates.
  onePerGate = -1.0                          #(double) If value is positive, then mutations will be limited to one per gate at this rate per gate.
                                             #  The distribution of mutations will be determined by the ratios of the defined mutation rates.
                                             #  If onePerBrain is set then onePerGate will be ignored
  recordMutationHistory = 0                  #(bool) If true, mutations will be recorded into data and max files. This may generate large data files!

% BRAIN_CGP
  availableOperators = all                   #(string) which opperators are allowed? all indicates, allow all opperators or, choose from: SUM,MULT,SUBTRACT,DIVIDE,SIN,COS,THRESH,RAND,IF,INV
  buildMode = linear                         #(string) How is the genome converted, "linear" : linear conversion starting at begining of genome, "codon" : start
                                             #  codons locate operator+in1+in2 along with the formula/output index and a location in formula
  codonMax = 100                             #(int) if using "genes" buildMode, values will be extracted from genome as integers [0..codonMax] and two sites that
                                             #  add to codonMax defines a start codon
  hiddenNodes = 3                            #(int) number of hidden nodes
  magnitudeMax = 1000000000.0                #(double) values generated which are larger then this will by clipped
  magnitudeMin = -1000000000.0               #(double) values generated which are smaller then this will by clipped
  operatorsPreFormula = 8                    #(int) number of instructions per formula. Ignored if buildMode is "genes"
  readFromOutputs = 1                        #(bool) if true, previous updates outputs will be available as inputs.

% BRAIN_CGP_NAMES
  genomeNameSpace = root::                   #(string) namespace used to set parameters for genome used to encode this brain

% BRAIN_HUMAN
  actionMapFileName = actionMap.txt          #(string) if useActionMap = true, use this file
  useActionMap = 0                           #(bool) if true, an action map will be used to translate user input

% BRAIN_MARKOV
  genomeNameSpace = root::                   #(string) namespace used to set parameters for genome used to encode this brain
  hiddenNodes = 8                            #(int) number of hidden nodes

% BRAIN_MARKOV_ADVANCED
  bitsPerBrainAddress = 8                    #(int) how many bits are evaluated to determine the brain addresses
  bitsPerCodon = 8                           #(int) how many bits are evaluated to determine the codon addresses
  randomizeUnconnectedOutputs = 0            #(bool) output nodes with no connections will be set randomly (default : false, behavior set to 0)
  randomizeUnconnectedOutputsMax = 1.0       #(double) random values resulting from randomizeUnconnectedOutput will be in the range of randomizeUnconnectedOutputsMin
                                             #  to randomizeUnconnectedOutputsMax
  randomizeUnconnectedOutputsMin = 0.0       #(double) random values resulting from randomizeUnconnectedOutput will be in the range of randomizeUnconnectedOutputsMin
                                             #  to randomizeUnconnectedOutputsMax
  randomizeUnconnectedOutputsType = 0        #(int) determines type of values resulting from randomizeUnconnectedOutput 0 = int, 1 = double
  recordIOMap = 0                            #(bool) if true, all inoput output and hidden nodes will be recorderd on every brain update
  recordIOMap_fileName = markov_IO_map.csv   #(string) Name of file where IO mappings are saved

% BRAIN_MARKOV_GATES_DECOMPOSABLE
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable decomposible gates
  initialCount = 3                           #(int) seed genome with this many start codons
  rowFirst = 1                               #(bool) set to true to make second-order decomposable gates operate in row-first expansion
  use2Level = 0                              #(bool) set to true to allow "super decomposable" gates

% BRAIN_MARKOV_GATES_DECOMPOSABLE_DIRECT
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable decomposible gates (direct factors version)
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_DECOMPOSABLE_FEEDBACK
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable decomposable feedback gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_DETERMINISTIC
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 1                                  #(bool) set to true to enable deterministic gates?
  initialCount = 6                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_EPSILON
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable epsilon gates
  epsilonSource = 0.05                       #(double) if value is in ance tha[0,1], cht output will be randomized. if < 1 or < 0, epsilon value is determined by
                                             #  the genome. If positive, then the genome handler will advance int(value) number of sites - 1 from the current location,
                                             #  before reading. If the value is negative, then int(abs(value)) indicates the absolute index of the site to be used
                                             #  i.e.(site at abs(value) in genome)
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_FEEDBACK
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable feedback gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_GENETICPROGRAMING
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable GP (what?) gates
  constValueMax = 1.0                        #(double) for the const values, max value the genome can generate
  constValueMin = -1.0                       #(double) for the const values, min value the genome can generate
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_NEURON
  allow = 1                                  #(bool) set to true to enable Neuron gates
  allowRepression = 1                        #(bool) if false, neuronGates only fire if charge exceeds threshold; if true, neuronGates can also exist which always
                                             #  fire, except when charge exceeds threshold
  decayRateMax = 10.0                         #(double) max % current charge will decay each time gate update is called (towards 0) per update
  decayRateMin = 1.0                         #(double) min % current charge will decay each time gate update is called (towards 0) per update
  deliveryChargeFromNode = 1                #(int) if 0, genome will determine deliveryCharge value within deliveryCharge range
                                             #  if 1, gate will have additional input, determined by genome, which will be clamped to deliveryCharge range and used
                                             #  as deliveryCharge value, if -1, genome will decide between options 0 and 1
  deliveryChargeMax = 2.0                    #(double) output charge
  deliveryChargeMin = -2.0                   #(double) output charge
  deliveryError = 0.05                        #(double) error in deliveryCharge... charge -= random[0,deliveryError)
  dischargeBehavior = -1                     #(int) what happens when gate fires (-1: let genome decide, 0: clear charge, 1: 'reduce' by delivery charge, 2: 1/2
                                             #  charge)
  initialCount = 20                          #(int) seed genome with this many start codons (neurons tend to work better in larger numbers)
  numInputsMax = 12                           #(int) max number of inputs to neuronGate
  numInputsMin = 1                           #(int) min number of inputs to neuronGate
  record_behavior = 0                        #(bool) if true, record neuron behavior (NOTE: this can generate a lot of data!)
  record_behavior_fileName = neuron_behavior.csv #(string) Name of file where neron behaviors are saved
  thresholdFromNode = 1                     #(int) if 0, genome will determine threshold value within threshold range
                                             #  if 1, gate will have additional input, determined by genome, which will be clamped to threshold range and used as
                                             #  threshold value, if -1, genome will decide between options 0 and 1
  thresholdMax = 2.0                         #(double) highest possible value for threshold
  thresholdMin = -2.0                        #(double) lowest possible value for threshold

% BRAIN_MARKOV_GATES_PROBABILISTIC
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable probabilistic gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_TRIT
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 1                                  #(bool) set to true to enable tritDeterministic gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_VOID
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable void gates
  epsilonSource = 0.05                       #(double) if value is in [0,1], chance that output will be randomized. if < 1 or < 0, epsilon value is determined by
                                             #  the genome. If positive, then the genome handler will advance int(value) number of sites - 1 from the current location,
                                             #  before reading. If the value is negative, then int(abs(value)) indicates the absolute index of the site to be used
                                             #  i.e.(site at abs(value) in genome
  initialCount = 3                           #(int) seed genome with this many start codons

% GENOME
  alphabetSize = 256.0                       #(double) alphabet size for genome
  genomeType = Circular                      #(string) genome to be used, [Circular, Multi]
  sitesType = char                           #(string) type for sites in genome [char, int, double, bool]

% GENOME_CIRCULAR
  mutationCopyMaxSize = 512                  #(int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  #(int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 #(double) per site insertion rate
  mutationCrossCount = 3                     #(int) number of crosses when performing crossover (including during recombination)
  mutationDeleteMaxSize = 512                #(int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                #(int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               #(double) per site deletion rate
  mutationIndelCopyFirst = 1                 #(bool) whether copy or deletion happens first (0 = delete first, 1 = copy first)
  mutationIndelInsertMethod = 0              #(int) where is copied material inserted?
                                             #  0 = place random, 1 = replace deleted sites, 2 = insert just before copied material
  mutationIndelMaxSize = 512                 #(int) maximum size of insertion-deletion mutation
  mutationIndelMinSize = 128                 #(int) minimum size of insertion-deletion mutation
  mutationIndelRate = 0.0                    #(double) per site insertion+deletion (indel) rate. This mutation copies a segment of the genome and deletes a segment
                                             #  of the same size so genome size remains fixed).
  mutationPointOffsetRange = 1.0             #(double) range of PointOffset mutation
  mutationPointOffsetRate = 0.0              #(double) per site point offset mutation rate (site changes in range (+/-)mutationPointOffsetRange)
  mutationPointRate = 0.005                  #(double) per site point mutation rate
  sizeInitial = 5000                         #(int) starting size for genome
  sizeMax = 20000                            #(int) if genome is larger then this, mutations will only decrease chromosome size
  sizeMin = 2000                             #(int) if genome is smaller then this, mutations will only increase chromosome size

% GENOME_MULTI
  chromosomeSizeInitial = 5000               #(int) starting size for all chromosomes in genome (inital genome size will be chromosomeSizeInitial * chromosome_sets
                                             #  * chromosome_ploidy)
  chromosomeSizeMax = 20000                  #(int) if a chromosome is larger then this, mutations will only decrease chromosome size
  chromosomeSizeMin = 2000                   #(int) if a chromosome is smaller then this, mutations will only increase chromosome size
  chromosome_ploidy = 1                      #(int) number of chromosomes in each chromosome_set
  chromosome_sets = 1                        #(int) number of chromosome sets (e.g. chromosome_set = 2 and chromosome_ploidy = 3 will result in a genome with 6
                                             #  chromosomes)
  mutationCopyMaxSize = 512                  #(int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  #(int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 #(double) per site insertion rate
  mutationCrossCount = 3                     #(int) number of crosses when performing crossover
  mutationDeleteMaxSize = 512                #(int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                #(int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               #(double) per site deletion rate
  mutationPointRate = 0.005                  #(double) per site point mutation rate

