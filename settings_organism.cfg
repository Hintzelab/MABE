% BRAIN
  brainType = CGP                            #(string) brain to be used, [CGP, ConstantValues, Human, ANN]

% BRAIN_ANN
  biasRange = -1.0,1.0                       #(string) When each nodes value is calculated a bias in this range (derived from the genome) will be added to the node
                                             #  value before thresholding.  (min,max)
  genomeName = root::                        #(string) namespace for parameters used to define this brain
  hiddenLayerSizes =                         #(string) comma seperated list of sizes for each hidden layer if there are hidden layers
                                             #  if a single number, all hidden layers will have this size
                                             #  if blank, hidden layers will all have (number of outputs + number of recurrent) nodes.
  nrOfHiddenLayers = 0                       #(int) number of hidden layers. if 0, hidden layer have (number of outputs + number of recurrent) nodes.
  nrOfRecurringNodes = 10                    #(int) number of recurring nodes
  thresholdMethod = Tanh                     #(string) Threshold method applied to node values after summation. Must be one of: NONE, Sigmoid, Tanh, ReLU, Binary
  weightRange = -1.0,1.0                     #(string) range for weight values (min,max)

% BRAIN_CGP
  availableOperators = all                   #(string) which opperators are allowed? all indicates, allow all opperators or, choose from: SUM,MULT,SUBTRACT,DIVIDE,SIN,COS,THRESH,RAND,IF,INV
  buildMode = linear                         #(string) How is the genome converted, "linear" : linear conversion starting at begining of genome, "codon" : start
                                             #  codons locate operator+in1+in2 along with the formula/output index and a location in formula
  codonMax = 100                             #(int) if using "genes" buildMode, values will be extracted from genome as integers [0..codonMax] and two sites that
                                             #  add to codonMax defines a start codon
  hiddenNodes = 3                            #(int) number of hidden nodes
  magnitudeMax = 1000000000.0                #(double) values generated which are larger then this will by clipped
  magnitudeMin = -1000000000.0               #(double) values generated which are smaller then this will by clipped
  operatorsPreFormula = 8                    #(int) number of instructions per formula. Ignored if buildMode is "genes"
  readFromOutputs = 1                        #(bool) if true, previous updates outputs will be available as inputs.

% BRAIN_CGP_NAMES
  genomeNameSpace = root::                   #(string) namespace used to set parameters for genome used to encode this brain

% BRAIN_CONSTANT
  initializeConstant = 0                     #(bool) If true, all values in genome will be initialized to initial constant value.
  initializeConstantValue = 0.0              #(double) If initialized constant, this value is used to initialize entire genome.
  initializeUniform = 0                      #(bool) Initialize genome randomly, with all samples having same value
  samplesPerValue = 1                        #(int) for each brain value, this many samples will be taken from genome and averaged
  valueMax = 100.0                           #(double) Maximum value that brain will deliver
  valueMin = 0.0                             #(double) Minmum value that brain will deliver
  valueType = 0                              #(int) 0 = int, 1 = double

% BRAIN_CONSTANT_NAMES
  genomeNameSpace = root::                   #(string) namespace used to set parameters for genome used to encode this brain

% BRAIN_HUMAN
  actionMapFileName = actionMap.txt          #(string) if useActionMap = true, use this file
  useActionMap = 0                           #(bool) if true, an action map will be used to translate user input

% GENOME
  alphabetSize = 256.0                       #(double) alphabet size for genome
  genomeType = Circular                      #(string) genome to be used, [Circular, Multi]
  sitesType = char                           #(string) type for sites in genome [char, int, double, bool]

% GENOME_CIRCULAR
  mutationCopyMaxSize = 512                  #(int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  #(int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 #(double) per site insertion rate
  mutationCrossCount = 3                     #(int) number of crosses when performing crossover (including during recombination)
  mutationDeleteMaxSize = 512                #(int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                #(int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               #(double) per site deletion rate
  mutationIndelCopyFirst = 1                 #(bool) whether copy or deletion happens first (0 = delete first, 1 = copy first)
  mutationIndelInsertMethod = 0              #(int) where is copied material inserted?
                                             #  0 = place random, 1 = replace deleted sites, 2 = insert just before copied material
  mutationIndelMaxSize = 512                 #(int) maximum size of insertion-deletion mutation
  mutationIndelMinSize = 128                 #(int) minimum size of insertion-deletion mutation
  mutationIndelRate = 0.0                    #(double) per site insertion+deletion (indel) rate. This mutation copies a segment of the genome and deletes a segment
                                             #  of the same size so genome size remains fixed).
  mutationPointOffsetRange = 1.0             #(double) range of PointOffset mutation
  mutationPointOffsetRate = 0.0              #(double) per site point offset mutation rate (site changes in range (+/-)mutationPointOffsetRange)
  mutationPointRate = 0.005                  #(double) per site point mutation rate
  sizeInitial = 5000                         #(int) starting size for genome
  sizeMax = 20000                            #(int) if genome is larger then this, mutations will only decrease chromosome size
  sizeMin = 2000                             #(int) if genome is smaller then this, mutations will only increase chromosome size

% GENOME_MULTI
  chromosomeSizeInitial = 5000               #(int) starting size for all chromosomes in genome (inital genome size will be chromosomeSizeInitial * chromosome_sets
                                             #  * chromosome_ploidy)
  chromosomeSizeMax = 20000                  #(int) if a chromosome is larger then this, mutations will only decrease chromosome size
  chromosomeSizeMin = 2000                   #(int) if a chromosome is smaller then this, mutations will only increase chromosome size
  chromosome_ploidy = 1                      #(int) number of chromosomes in each chromosome_set
  chromosome_sets = 1                        #(int) number of chromosome sets (e.g. chromosome_set = 2 and chromosome_ploidy = 3 will result in a genome with 6
                                             #  chromosomes)
  mutationCopyMaxSize = 512                  #(int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  #(int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 #(double) per site insertion rate
  mutationCrossCount = 3                     #(int) number of crosses when performing crossover
  mutationDeleteMaxSize = 512                #(int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                #(int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               #(double) per site deletion rate
  mutationPointRate = 0.005                  #(double) per site point mutation rate

